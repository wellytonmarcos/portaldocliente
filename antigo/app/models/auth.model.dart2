import 'dart:convert';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:local_auth/local_auth.dart';
import 'package:portaldocliente/app/models/cliente_model.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;

class AuthModel extends ChangeNotifier {
  String errorMessage = "";

  bool _rememberMe = false;
  bool _stayLoggedIn = true;
  bool _useBio = false;
  ClienteModel _cliente;

  bool get rememberMe => _rememberMe;

  void handleRememberMe(bool value) {
    _rememberMe = value;
    notifyListeners();
    SharedPreferences.getInstance().then((prefs) {
      prefs.setBool("remember_me", value);
    });
  }

  bool get isBioSetup => _useBio;

  void handleIsBioSetup(bool value) {
    _useBio = value;
    notifyListeners();
    SharedPreferences.getInstance().then((prefs) {
      prefs.setBool("use_bio", value);
    });
  }

  bool get stayLoggedIn => _stayLoggedIn;

  void handleStayLoggedIn(bool value) {
    _stayLoggedIn = value;
    notifyListeners();
    SharedPreferences.getInstance().then((prefs) {
      prefs.setBool("stay_logged_in", value);
    });
  }

  void loadSettings() async {
    var _prefs = await SharedPreferences.getInstance();
    try {
      _useBio = _prefs.getBool("use_bio") ?? false;
    } catch (e) {
      print(e);
      _useBio = false;
    }
    try {
      _rememberMe = _prefs.getBool("remember_me") ?? false;
    } catch (e) {
      print(e);
      _rememberMe = false;
    }
    try {
      _stayLoggedIn = _prefs.getBool("stay_logged_in") ?? false;
    } catch (e) {
      print(e);
      _stayLoggedIn = false;
    }

    if (_stayLoggedIn) {
      ClienteModel _savedCliente;
      try {
        String _saved = _prefs.getString("cliente_data");
        print("Saved: $_saved");
        _savedCliente = ClienteModel.fromJson(json.decode(_saved));
      } catch (e) {
        print("User Not Found: $e");
      }
      if (!kIsWeb && _useBio) {
        if (await biometrics()) {
          _cliente = _savedCliente;
        }
      } else {
        _cliente = _savedCliente;
      }
    }
    notifyListeners();
  }

  Future<bool> biometrics() async {
    final LocalAuthentication auth = LocalAuthentication();
    bool authenticated = false;
    try {
      authenticated = await auth.authenticateWithBiometrics(
          localizedReason: 'Scan your fingerprint to authenticate',
          useErrorDialogs: true,
          stickyAuth: false);
    } catch (e) {
      print(e);
    }
    return authenticated;
  }

  //ClienteModel _savedCliente;
  get cliente => _cliente;

  Future<ClienteModel> getInfo(String token) async {
    try {
      var _data = await http.get('apiURL');
      // var _json = json.decode(json.encode(_data));
      var _newCliente = ClienteModel.fromJson(json.decode(_data.body)["data"]);
      _newCliente?.token = token;
      return _newCliente;
    } catch (e) {
      print("Could Not Load Data: $e");
      return null;
    }
  }

  Future<bool> login(
      {@required String email, @required String password}) async {
    String _email = email;
    String _password = password;

    await Future.delayed(Duration(seconds: 3));
    print("Logging In => $_email, $_password");
    // Get Info For User
    ClienteModel _newCliente = ClienteModel.fromJson({
      "idCliente": 1,
      "cgcCfo": '083.679.476-14',
      "email": 'wellytonmarcos@gmail.com',
      "nome": 'Wellyton Marcos Silva de Oliveira',
      "foto":
          'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRwg9kLDjbiE5BHUms0c4H0Qq-9Erq4FKNI9pUfbzkPez08FxBZ&usqp=CAU',
      "password": '123456',
      "tentativas": 1,
      "lastLogin": 'this.lastLogin',
      "aceiteTermo": true,
      "token": 'this.token',
      "refreshToken": 'this.refreshToken'
    });
    if (_newCliente != null) {
      _cliente = _newCliente;
      notifyListeners();

      SharedPreferences.getInstance().then((prefs) {
        var _save = json.encode(_cliente.toJson());
        print("Data: $_save");
        prefs.setString("cliente_data", _save);
      });
    }

    if (_newCliente?.token == null || _newCliente.token.isEmpty) {
      return false;
    } else {
      return true;
    }
  }

  Future<void> logout() async {
    _cliente = null;
    notifyListeners();
    SharedPreferences.getInstance().then((prefs) {
      prefs.setString("cliente_data", null);
    });
    return;
  }
}
