import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_mobx/flutter_mobx.dart';

import 'package:flutter_svg/flutter_svg.dart';
import 'package:mobx/mobx.dart';
import 'package:portaldocliente/app/constants/color_constant.dart';
import 'package:portaldocliente/app/helpers/custom_text_widget.dart';
import 'package:portaldocliente/app/stores/app.store.dart';
import 'package:portaldocliente/app/views/home/home.view.dart';
import 'package:provider/provider.dart';

import 'components/custom_icon_button_widget.dart';
import 'components/custom_text_field_widget.dart';
import 'components/login_logo_widget.dart';

class LoginView extends StatefulWidget {
  LoginViewState createState() => LoginViewState();
}

class LoginViewState extends State<LoginView> {
  TextEditingController _controllerEmail = TextEditingController();
  TextEditingController _controllerPassword = TextEditingController();
  AppStore loginStore;

  @override
  initState() {
    super.initState();
  }

  ReactionDisposer disposer;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();

    loginStore = Provider.of<AppStore>(context);

    autorun((_) {
      loginStore.loadSettings();
    });

    disposer = reaction((_) => loginStore.loggedIn, (loggedIn) {
      print('Se estÃ¡ logado');
      if (loggedIn)
        Navigator.of(context)
            .pushReplacement(MaterialPageRoute(builder: (_) => HomeView()));
    });
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        body: Stack(
          children: <Widget>[
            SingleChildScrollView(
              child: Container(
                height: MediaQuery.of(context).copyWith().size.height - 30,
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: <Widget>[
                    Padding(
                      padding: EdgeInsets.all(15.0),
                      child: Form(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: <Widget>[
                            getLoginLogoPortal(context),
                            ListTile(title: Observer(builder: (_) {
                              return CustomTextField(
                                hint: 'E-mail',
                                prefix: Icon(Icons.account_circle),
                                textInputType: TextInputType.emailAddress,
                                onChanged: loginStore.setEmail,
                                enabled: true,
                                controller: _controllerEmail,
                                defaultValue: loginStore.email,
                              );
                            })),
                            ListTile(
                              title: Observer(builder: (_) {
                                return CustomTextField(
                                  hint: 'Senha',
                                  prefix: Icon(Icons.lock),
                                  obscure: !loginStore.isVisiblePassword,
                                  onChanged: loginStore.setPassword,
                                  enabled: true,
                                  suffix: CustomIconButton(
                                    radius: 32,
                                    iconData: Icons.visibility,
                                    onTap: loginStore.togglePasswordVisible,
                                  ),
                                  controller: _controllerPassword,
                                  defaultValue: loginStore.password,
                                );
                              }),
                            ),
                            ListTile(
                              title: CustomText('Salvar e-mail',
                                  FontWeight.w500, kPrimaryColor, 18),
                              trailing: Observer(
                                builder: (_) {
                                  return Switch.adaptive(
                                    activeColor: kPrimaryColor,
                                    onChanged: (bool value) {
                                      loginStore.toggleRemeberMe();
                                    },
                                    value: loginStore.isRememberMe,
                                  );
                                },
                              ),
                            ),
                            ListTile(
                              title: Observer(builder: (_) {
                                return SizedBox(
                                  height: 44,
                                  child: RaisedButton(
                                      shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.circular(32),
                                      ),
                                      child: loginStore.loading
                                          ? CircularProgressIndicator(
                                              valueColor:
                                                  AlwaysStoppedAnimation(
                                                      Colors.white),
                                            )
                                          : CustomText('Login', FontWeight.w500,
                                              kWhiteColor, 18),
                                      color: kPrimaryColor,
                                      disabledColor:
                                          kPrimaryColor.withAlpha(100),
                                      textColor: Colors.white,
                                      onPressed: loginStore.loginPressed),
                                );
                              }),
                            ),
                            Padding(
                              //Logo
                              padding: EdgeInsets.all(10),
                              child: SvgPicture.asset(
                                'assets/logos/gruposn.svg',
                                width: MediaQuery.of(context).size.width * 0.3,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    disposer();
    super.dispose();
  }
}
